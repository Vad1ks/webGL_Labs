// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
uniform mat4 ModelViewProjectionMatrix, normalMat;
varying vec3 normalInterp;
varying vec3 vertPos;

attribute vec2 texture;

varying vec2 v_texcoord;

uniform vec3 translateUP;
uniform vec2 userPoint;
uniform float rotA;

mat4 translation(float tx, float ty, float tz) {
    mat4 dst;

    dst[0][0] = 1.0;
    dst[0][ 1] = 0.0;
    dst[0][ 2] = 0.0;
    dst[0][ 3] = 0.0;
    dst[1][ 0] = 0.0;
    dst[1][ 1] = 1.0;
    dst[1][ 2] = 0.0;
    dst[1][ 3] = 0.0;
    dst[2][ 0] = 0.0;
    dst[2][ 1] = 0.0;
    dst[2][ 2] = 1.0;
    dst[2][ 3] = 0.0;
    dst[3][ 0] = tx;
    dst[3][ 1] = ty;
    dst[3][ 2] = tz;
    dst[3][ 3] = 1.0;
    return dst;
}
mat4 rotation(float angleInRadians) {
    mat4 dst;
    float c = cos(angleInRadians);
    float s = sin(angleInRadians);

    dst[0][0] = c;
    dst[0][ 1] = s;
    dst[0][ 2] = 0.0;
    dst[0][ 3] = 0.0;
    dst[1][ 0] = -s;
    dst[1][ 1] = c;
    dst[1][ 2] = 0.0;
    dst[1][ 3] = 0.0;
    dst[2][ 0] = 0.0;
    dst[2][ 1] = 0.0;
    dst[2][ 2] = 1.0;
    dst[2][ 3] = 0.0;
    dst[3][ 0] = 0.0;
    dst[3][ 1] = 0.0;
    dst[3][ 2] = 0.0;
    dst[3][ 3] = 1.0;

    return dst;
}

void main() {
   mat4 rotMatrix = rotation(rotA);
    mat4 transMatrix1 = translation(userPoint.x,userPoint.y,0.0);
    mat4 transMatrix2 = translation(-userPoint.x,-userPoint.y,0.0);
    vec4 vertPos4 = ModelViewProjectionMatrix * vec4(vertex, 1.0);
    vec4 texture1 = vec4(texture,0.0,0.0)*transMatrix1;
    vec4 textureRotated = texture1*rotMatrix;
    vec4 texture2 = textureRotated*transMatrix2;
    v_texcoord = vec2(texture2.x,texture2.y);
    vertPos = vec3(vertPos4) / vertPos4.w;
    normalInterp = vec3(normalMat * vec4(normal, 0.0));
    gl_Position = vertPos4;
    if(rotA>1000.0){
        vec4 translatePoint = translation(translateUP.x,translateUP.y,translateUP.z)*vec4(vertex,1.0);
        gl_Position = ModelViewProjectionMatrix*translatePoint;
    }

}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec2 v_texcoord;
uniform sampler2D tmu;
uniform float rotA;

varying vec4 color;
precision mediump float;
varying vec3 normalInterp;  // Surface normal
varying vec3 vertPos;       // Vertex position
uniform float ambientCoefficient;   // Ambient reflection coefficient
uniform float diffuseCoefficient;   // Diffuse reflection coefficient
uniform float specularCoefficient;   // Specular reflection coefficient
uniform float shininess; // Shininess
uniform vec3 ambientColor;
uniform vec3 diffuseColor;
uniform vec3 specularColor;
uniform vec3 lightPosition;

void main() {
  vec3 vNormal = normalize(normalInterp);
  vec3 light = normalize(lightPosition);

  float dotProduct = max(dot(vNormal, light), 0.0);
  float specular = 0.0;

  if(dotProduct > 0.0) {
    vec3 reflect = reflect(-light, vNormal);      
    vec3 n_vertPos = normalize(-vertPos); 
    float specAngle = max(dot(reflect, n_vertPos), 0.0);
    specular = pow(specAngle, shininess);
  }
  gl_FragColor = vec4(ambientCoefficient * ambientColor 
                  + diffuseCoefficient * dotProduct * diffuseColor 
                  + specularCoefficient * specular * specularColor, 1.0);
vec4 texColor = texture2D(tmu, v_texcoord);
    gl_FragColor = texColor;
    if(rotA>1000.0){
        gl_FragColor = vec4(0.,0.,0.,0.);
    }
}`;
